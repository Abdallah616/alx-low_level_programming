#include "shell.h"

void execute_command(const char *input, const char *program_name)
 {
    char **args = malloc(sizeof(char *) * MAX_INPUT_LENGTH), *token = my_strtok((char *)input, " ");
    int i = 0, status;
    pid_t pid;

    while (token != NULL && i < MAX_INPUT_LENGTH - 1) {
        args[i++] = token;
        token = my_strtok(NULL, " ");
    }
    args[i] = NULL;
    if (i == 0)
        return;
    if (sh_strcmp(args[0], "exit") == 0)
        exit(EXIT_SUCCESS);
    if (sh_strcmp(args[0], "env") == 0)
    {
        print_environment();
        return;
    }
    if (sh_strcmp(args[0], "cd") == 0)
     {
        sh_cd(args[1], program_name);
        return;
    }
    pid = fork();
    if (pid == -1)
     {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid == 0)
    {
        execvp(args[0], args);
        fprintf(stderr, "%s: 1: %s: not found\n", program_name, args[0]);
        exit(EXIT_FAILURE);
    }
    else
        waitpid(pid, &status, 0);
    free(args);
}
